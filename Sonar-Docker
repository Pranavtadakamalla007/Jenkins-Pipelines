pipeline{
    agent any
    environment{
        ecrRegistryCredentials= 'ecr:us-east-1:awsjenkins'
        registryURI= '654654442854.dkr.ecr.us-east-1.amazonaws.com/vprofileimage'
        vprofileregistry= 'https://654654442854.dkr.ecr.us-east-1.amazonaws.com'
        cluster= 'Vprofilecluster'
        service= 'vprofile-service'
    }
    stages{
        stage('checkout'){
            steps{
                git branch:'main', url:'https://github.com/adigopulabharath/vprofile-project.git'
            }
        }
        stage('build'){
            steps{
                sh 'mvn clean install -DskipTests'
            }
            post{
                success{
                    echo 'achiving'
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }
        stage('test'){
            steps{
                sh 'mvn test'
            }
        }
        stage('checkstyle'){
            steps{
                sh 'mvn checkstyle:checkstyle'
            }
        }
        stage('sonar analysis'){
            environment{
                SonarScannerHome= tool'SonarScannerV6'
            }
            steps{
                withSonarQubeEnv('Sonarqube'){
                    sh '''${sonarscannerhome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }
        stage('Quality Gate'){
            steps{
                timeout(time:1,unit:'HOURS')
                waitForQualityGate abortPipeline:true
            }
        }
        stage('build image'){
            steps{
                script{
                    dockerImage= docker.build(registryURI+":$BUILD_NUMBER","./Docker-files/app/multistage/")
                }
            }
        }
        stage('upload image'){
            steps{
                script{
                    docker.withRegistry(vprofileregistry,ecrRegistryCredentials){
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
        stage('Deploy to ECS'){
            steps{
                withAWS(credentials:'awsjenkins', region:'us-east-1'){
                    sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployement'
                }
            }
        }
    }
}
